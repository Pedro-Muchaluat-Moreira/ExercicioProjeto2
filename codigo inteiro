def cria_mapa(n):
    mapa=[[''for_in range (N)]for_in range(N)]
    return mapa
def posicao_suporta(mapa, blocos, linha, coluna, orientacao):
    N = len(mapa)  # Dimensão do mapa
    if linha < 0 or coluna < 0 or linha >= N or coluna >= N:
        return False  # Fora do mapa
    
    if orientacao == 'v':  # Orientação vertical
        if linha + blocos > N:
            return False  # Navio fora do mapa
        for i in range(linha, linha + blocos):
            if mapa[i][coluna] != ' ':
                return False  # Conflito com outro navio
    elif orientacao == 'h':  # Orientação horizontal
        if coluna + blocos > N:
            return False  # Navio fora do mapa
        for j in range(coluna, coluna + blocos):
            if mapa[linha][j] != ' ':
                return False  # Conflito com outro navio
    
    return True  # Posição suporta o navio   
def aloca_navios(mapa, blocos):
    N = len(mapa)
    for navio in blocos:
        while True:
            linha = random.randint(0, N - 1)
            coluna = random.randint(0, N - 1)
            orientacao = random.choice(['h', 'v'])
            if posicao_suporta(mapa, navio, linha, coluna, orientacao):
                if orientacao == 'v':
                    for i in range(linha, linha + navio):
                        mapa[i][coluna] = 'N'
                else:
                    for j in range(coluna, coluna + navio):
                        mapa[linha][j] = 'N'
                break
    return mapa
def foi_derrotado(matriz):
    for linha in matriz:
        if 'N' in linha:
            return False
    return True
